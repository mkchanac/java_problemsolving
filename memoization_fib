// memoization, duplicate sub problems, improve the fibonacci recursion function by storing the duplicate sub problems in
// js object, keys will be argument n to function, value will be the return value
// key = n, value = memo[n]
// hash map, memo = {},     {3:2, 4:3....} for fib function (1:1,2:1) are base case, not store in memo object

const fib = (n, memo = {}) => {
  if (n in memo) return memo[n];   // must be first step! check if the key exists, if exists directly use the stored value, save computing times
  if (n <= 2) return 1;
  memo[n] = fib(n - 1, memo) + fib(n - 2, memo); // pass by reference object
  return memo[n];
};

console.log(fib(3));
console.log(fib(4));
console.log(fib(25));
console.log(fib(50));
